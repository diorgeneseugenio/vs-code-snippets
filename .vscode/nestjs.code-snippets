{
    "Nest.js - Create Entity": {
      "scope": "typescript,javascript",
      "prefix": "nest-entity",
      "body": [
        "import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';",
        "",
        "@Entity(\"${1:TableName}\")",
        "export class ${2:EntityName}ORMEntity {",
        "",
        "\t@PrimaryGeneratedColumn()",
        "\tid: number;",
        "",
        "\t@Column()",
        "\t${3:columnName}: string;",
        "",
        "\t@CreateDateColumn()",
        "\tcreatedAt: Date;",
        "",
        "\t@UpdateDateColumn({ nullable: true })",
        "\tupdatedAt: Date;",
        "",
        "\t@DeleteDateColumn({ nullable: true })",
        "\tdeletedAt: Date;",
        "}"
      ]
    },
    "Nest.js - Create Test with Data Source": {
      "scope": "typescript,javascript",
      "prefix": "nest-test-data-source",
      "body": [
        "import { entities as globalEntities } from \"@/data/entities\";",
        "import { INestApplication } from \"@nestjs/common\";",
        "import { Test, TestingModule } from \"@nestjs/testing\";",
        "import { TypeOrmModule, getRepositoryToken } from \"@nestjs/typeorm\";",
        "import { generateInMemoryDatabase } from \"@test/utils/generate-in-memory-database\";",
        "import { IBackup, IMemoryDb } from \"pg-mem\";",
        "import { DataSource, Repository } from \"typeorm\";",
        "",
        "const entities = [...globalEntities];"
        "",
        "const runSeed = async (",
        "\tdataSource: DataSource",
        ") => {",
        "\tconst register: ${1:EntityName} = {};",
        "\tconst repository = dataSource.getRepository(${1:EntityName});",
        "\tawait repository.insert(register);",
        "};",
        "",
        "describe(\"${2:ServiceName}\", () => {",
        "\tlet dataSource: DataSource;",
        "\tlet module: TestingModule;",
        "\tlet database: IMemoryDb;",
        "\tlet databaseBackup: IBackup;",
        "\tlet app: INestApplication;",
        "",
        "\tlet service: ${2:ServiceName};",
        "\tlet repository: Repository<${1:EntityName}>;",
        "",
        "\tbeforeAll(async () => {",
        "\t\tdatabase = generateInMemoryDatabase();",
        "",
        "\t\tdataSource = database.adapters.createTypeormDataSource({",
        "\t\t\ttype: \"postgres\",",
        "\t\t\tentities,",
        "\t\t\tname: \"test\",",
        "\t\t\tdatabase: \":memory:\",",
        "\t\t\tsynchronize: true,",
        "\t\t}) as DataSource;",
        "",
        "\t\tawait dataSource.initialize();",
        "",
        "\t\tmodule = await Test.createTestingModule({",
        "\t\t\timports: [",
        "\t\t\t\tTypeOrmModule.forRoot({",
        "\t\t\t\t\ttype: \"postgres\",",
        "\t\t\t\t}),",
        "\t\t\t\tTypeOrmModule.forFeature(entities),",
        "\t\t\t],",
        "\t\t\tproviders: [",
        "\t\t\t\t${2:ServiceName},",
        "\t\t\t],",
        "\t\t})",
        "\t\t\t.overrideProvider(DataSource)",
        "\t\t\t.useValue(dataSource)",
        "\t\t\t.compile();",
        "",
        "\t\tdatabaseBackup = database.backup();",
        "",
        "\t\tapp = await module.createNestApplication().init();",
        "\t});",
        "",
        "\tafterAll(async () => {",
        "\t\tawait dataSource.destroy();",
        "\t\tawait app.close();",
        "\t});",
        "",
        "\tbeforeEach(() => {",
        "\t\tjest.restoreAllMocks();",
        "",
        "\t\tdatabaseBackup.restore();",
        "",
        "\t\tservice = module.get<${2:ServiceName}>(${2:ServiceName});",
        "\t\trepository = module.get<Repository<${1:EntityName}>>(getRepositoryToken(${1:EntityName}));",
        "\t});",
        "",
        "\tit(\"should be defined\", () => {",
        "\t\texpect(service).toBeDefined();",
        "\t\texpect(repository).toBeDefined();",
        "\t});",
        "",
        "\tit(\"should run seed\", async () => {",
        "\t\tawait runSeed(dataSource);",
        "",
        "\t\tconst result = await repository.find();",
        "",
        "\t\texpect(result).toHaveLength(1);",
        "\t});",
        "});"
      ]
    },
    "Nest.js - Create Test without Data Source": {
      "scope": "typescript,javascript",
      "prefix": "nest-test-repository",
      "body": [
        "import { createMock } from \"@golevelup/ts-jest\";",
        "import { INestApplication } from \"@nestjs/common\";",
        "import { Test, TestingModule } from \"@nestjs/testing\";",
        "import { getRepositoryToken } from \"@nestjs/typeorm\";",
        "import { Repository } from \"typeorm\";",
        "",
        "describe(\"${1:ServiceName}\", () => {",
        "\tlet module: TestingModule;",
        "\tlet app: INestApplication;",
        "",
        "\t/** Services */",
        "\tlet service: ${1:ServiceName};",
        "",
        "\t/** Repositories */",
        "\tconst repository = createMock<Repository<${2:EntityName}>>();",
        "",
        "\tbeforeAll(async () => {",
        "\t\tmodule = await Test.createTestingModule({",
        "\t\t\tproviders: [",
        "\t\t\t\t${1:ServiceName},",
        "\t\t\t\t{",
        "\t\t\t\t\tprovide: getRepositoryToken(${2:EntityName}),",
        "\t\t\t\t\tuseValue: repository,",
        "\t\t\t\t},",
        "\t\t\t],",
        "\t\t}).compile();",
        "",
        "\t\tapp = await module.createNestApplication().init();",
        "\t});",
        "",
        "\tafterAll(async () => {",
        "\t\tawait app.close();",
        "\t});",
        "",
        "\tbeforeEach(() => {",
        "\t\tjest.restoreAllMocks();",
        "",
        "\t\tservice = module.get<${1:ServiceName}>(",
        "\t\t\t${1:ServiceName}",
        "\t\t);",
        "\t});",
        "",
        "\tit(\"should be defined\", () => {",
        "\t\texpect(service).toBeDefined();",
        "\t\texpect(repository).toBeDefined();",
        "\t});",
        "",
        "\tit(\"should call repository\", async () => {",
        "\t\tawait service; /** Call an valid method */",
        "",
        "\t\texpect(repository.save).toHaveBeenCalledTimes(1);",
        "\t});",
        "});",
      ]
    }
  }
